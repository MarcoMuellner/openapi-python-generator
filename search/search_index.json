{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenAPI python generator","text":"<p>OpenAPI python generator, a modern way to generate clients for OpenAPI 3.0.0+ APIs</p> <p></p>"},{"location":"#_1","title":"","text":"<p>Documentation:</p> <p>Source: https://github.com/MarcoMuellner/openapi-python-generator</p> <p>OpenAPI python generator is a modern way to generate clients for OpenAPI 3.0.0+ APIs. It provides a full Client, including pydantic models (providing type-safe data structures) and multiple supported frameworks.</p> <p>The key features of the generator are:</p> <ul> <li>Ease of use. Provide input, output and the library, and the generator will do the rest.</li> <li>Type safety and type hinting. OpenAPI python generator makes heavy use of pydantic models to provide type-safe data structures.</li> <li>Support for multiple rest frameworks. OpenAPI python generator currently supports the following:<ul> <li>httpx</li> <li>requests</li> <li>aiohttp</li> </ul> </li> <li>Async and sync code generation support, depending on the framework. It will automatically create both for frameworks that support both.</li> <li>Easily extendable using Jinja2 templates. The code is designed to be easily extendable and should support even more languages and frameworks in the future.</li> <li>Fully tested. Every generated code is automatically tested against the OpenAPI spec and we have 100% coverage.</li> <li>Usage as CLI or as library.</li> </ul> <p>Interested? Hop over to our Quickstart page, if you don't want to bother reading the docs, or if you just want to try it out. If you want to get a more in depth guide, check out our Tutorials page. If you are interested in the OpenAPI spec, go check out our OpenAPI Specification page.</p>"},{"location":"openapi-definition/","title":"A quick word about OpenAPI","text":"<p>Note: This documentation is not intended to be a full introduction to OpenAPI, but rather a quick introduction into its workings, and how we can use it to generate Python code from an OpenAPI 3.0.0 specification. Check their github repo and official documentation for more info.</p>"},{"location":"openapi-definition/#introduction","title":"Introduction","text":"<p>The OpenAPI spec is an open and standardized format for describing RESTful APIs. This is especially useful, because it provides a machine readable description of the API (in either JSON or YAML format), which can then be used to do all kind of cool things with it. In our case, we'll try to automatically create a client for our API. Read this page on their documentation for a more in depth description of the spec.</p> <p>What we are interested in is specifically the specifications document, which gives us an idea on what we can extract from the spec. At its minimum, the spec requires the following:</p> <ul> <li>The <code>openapi</code> field. This is the version of the spec.</li> <li>The <code>info</code> field. This is a dictionary containing information about the API (title, versions).</li> <li>The <code>paths</code> field. This is a dictionary containing the paths of the API (can be empty however).</li> </ul> <p>Therefore a minimal spec would look like this:</p> <pre><code>{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"My API\",\n    \"version\": \"1.0.0\"\n  },\n  \"paths\": {}\n}\n</code></pre> <p>or in YAML:</p> <pre><code>openapi: 3.1.0\ninfo:\n  title: A minimal OpenAPI document\n  version: 0.0.1\npaths: { } # No endpoints defined\n</code></pre> <p>We'll kepp to the json format for the rest of this documentation.</p>"},{"location":"openapi-definition/#the-path-dictionary","title":"The path dictionary","text":"<p>Of special interest is the <code>paths</code> dictionary. This dictionary contains all information necessay to describe the given paths and operations of the API. Each <code>path</code> contains zero or more so called <code>operations</code>, which describe the different HTTP methods that can be used on the given path. For more in depth info on HTTP methods, see the Modzilla web docs. So, the structure of any given path is as follows:</p> <pre><code>{\n  \"/users\": {\n    \"get\": {\n      ...\n    },\n    \"post\": {\n      ...\n    },\n    \"put\": {\n      ...\n    }\n  },\n  \"/teams\": {\n    \"get\": {\n      ...\n    },\n    \"post\": {\n      ...\n    },\n    \"put\": {\n      ...\n    }\n  }\n}\n</code></pre> <p>This is already pretty neat! We get a full list of all paths, and can do with them as we please. Now lets look at these operations a bit more in detail.</p>"},{"location":"openapi-definition/#the-operations","title":"The operations","text":"<p>OpenAPI operations have a ton of possible field. We don't want to get into all of them, but rather take a look at the most important ones, 'parameters' and 'responses'</p> <p>Note: It makes sense to have more info on these operations than just these two fields. However, you will very probably generate the <code>.json</code> from an existing API, and won't need to bother with the other fields much. If you have to or want to, do take a look at the documentation above</p> <p>A potential operation could look something like this:</p> <pre><code>{\n  \"get\": {\n    \"summary\": \"Get a user\",\n    \"description\": \"Get a user by id\",\n    \"operationId\": \"getUser\",\n    \"parameters\": [\n      {\n        \"name\": \"id\",\n        \"in\": \"path\",\n        \"description\": \"The id of the user\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        }\n      }\n    ],\n    \"responses\": {\n      \"200\": {\n        \"description\": \"A user\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/User\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>That is quite a lot of information! Lets walk through the fields step by step, starting with the <code>parameters</code> field.</p> <pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"id\", # The name of the parameter\n      \"in\": \"path\", #The parameter is in the path or in the query string\n      \"description\": \"The id of the user\", # A description of the parameter\n      \"required\": true, #Wether the parameter must be present in the query or not\n      \"schema\": {\n        \"type\": \"string\" #The type of the parameter\n      }\n    }\n  ]\n}\n</code></pre> <p>OpenAPI python generator will automatically take care of these parameters in the generated code, provide args to pass (and default values if they aren't required), and will automatically add the parameters to where they need to be (path or query string). Parameters can also refer to so called <code>References</code>, which we will cover in the next subchapter.</p> <p>Lets take a look at the <code>responses</code> field:</p> <p><pre><code>{\n  \"200\": { # The status code of the response\n    \"description\": \"A user\", # Description of the response\n    \"content\": { # The content and type of content\n      \"application/json\": {\n        \"schema\": {\n          \"$ref\": \"#/components/schemas/User\" # A reference to a specific object in the spec\n        }\n      }\n    }\n  }\n}\n</code></pre> OpenAPI python generator will take the first available <code>2xx</code> response code and use it as the \"good\" response code. It will also raise a <code>HTTPException</code> for any other response code taken from the API. The <code>$ref</code> field is interesting, it doesn't fit the normal <code>schema</code> definition of types. It refers to so called <code>Components</code> in the spec, which we can also use to our advantage, by creating these components as pydantic models.</p>"},{"location":"openapi-definition/#components","title":"Components","text":"<p>Last but not least, an OpenAPI spec can contain so called <code>Components</code>. These are dictionaries that contain definitions to types that can be returned or input via body parameters to queries. For example, a user object would look like this:</p> <pre><code>{\n  \"components\": {\n    \"schemas\": {\n      \"User\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>If you feel comfortable with the above, we can now move on to the actual generation of the code, and take a look at the generator.</p>"},{"location":"quick_start/","title":"Quick start","text":"<p>Make sure you have the latest version of <code>openapi-python-generator</code> installed.</p> pip install openapi-python-generator --upgrade Successfully installed openapi-python-generator <p>To call the generator, simply pass the OpenAPI spec (as a link or to a file), and an output folder. Optionally you can also pass the library you would like to use.</p> openapi-python-generator https://raw.githubusercontent.com/MarcoMuellner/openapi-python-generator/main/tests/test_data/test_api.json testclient Generating data from https://raw.githubusercontent.com/MarcoMuellner/openapi-python-generator/main/tests/test_data/test_api.json <p>This will generate a folder called testclient, with the following structure (using the file above):</p> <pre><code>- models\n    - __init__.py\n    - HTTPValidationError.py\n    - RootResponse.py\n    - Team.py\n    - User.py\n    - ValidationError.py\n    - EnumComponent.py\n- services\n    - __init__.py\n    - async_general_service.py\n    - general_service.py\n- __init__.py\n- api_config.py\n</code></pre> <p>To use it, simply import the module and call the functions:</p> <pre><code>from testclient import root__get\n\nroot__get()  # Returns a RootResponse object\n</code></pre> <p>If you'd like more info, do check out our Tutorial or the API Reference.</p>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>There are a couple of awesome libraries, without which this wouldn't work. In no particular order:</p> <ul> <li>pydantic - A Python data model library that provides a simple, clean, and efficient data model for your application.</li> <li>Jinja2 - A template engine for Python.</li> <li>httpx - A Python HTTP client library for asyncio/sync with the familiar syntax of requests.</li> </ul> <p>Also do check out the article series Hypermodern python, which cookiecutter project was used to generate this project. Also special thanks to fastapi for showing us on how to properly write documentation.</p>"},{"location":"references/","title":"API Reference","text":""},{"location":"references/#cli-interface","title":"CLI Interface","text":"<p><pre><code>$ openapi-python-generator &lt;spec&gt; &lt;output_folder&gt; [library]\n</code></pre> Arguments: <pre><code>&lt;spec&gt;\n    The OpenAPI spec to use. Either a URL or a local file.\n&lt;output_folder&gt;\n    The folder to output the generated code to.\n</code></pre></p> <p>Options: <pre><code>--library [httpx|requests|aiohttp]\n                          HTTP library to use in the generation of the client.\n                          Defaults to 'httpx'.\n\n--env-token-name TEXT     Name of the environment variable that contains the token.\n                          If set, code expects this environment variable and will\n                          raise an error if not set.\n                          Defaults to 'access_token'.\n\n--use-orjson             Use the orjson library for JSON serialization. Enables\n                         faster processing and better type support.\n                         Defaults to False.\n\n--custom-template-path TEXT\n                         Custom template path to use. Allows overriding of the\n                         built in templates.\n\n--pydantic-version [v1|v2]\n                         Pydantic version to use for generated models.\n                         Defaults to 'v2'.\n\n--formatter [black|none]\n                         Option to choose which auto formatter is applied.\n                         Defaults to 'black'.\n\n--version                Show the version and exit.\n-h, --help              Show this help message and exit.\n</code></pre></p>"},{"location":"references/module_usage/","title":"Usage as a module","text":"<p>Coming soon</p>"},{"location":"tutorial/","title":"Getting started","text":""},{"location":"tutorial/#pre-requisits","title":"Pre requisits","text":"<p>As already denoted in the quick start section, the first thing you need to do is to actually install the generator. You can do so via pip or any other package manager.</p> pip install openapi-python-generator --upgrade Successfully installed openapi-python-generator <p>For this tutorial, we'll use the <code>test_api.json</code> file contained within the test suite of the generator. It has the following structure:</p> test_api.json <pre><code>{\n  \"openapi\": \"3.0.2\",\n  \"info\": {\n    \"title\": \"openapi-python-generator test api\",\n    \"description\": \"API Schema for openapi-python-generator test api\",\n    \"version\": \"1.0.0\",\n    \"x-logo\": {\n      \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n    }\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Root\",\n        \"operationId\": \"root__get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/RootResponse\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users\": {\n      \"get\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Get Users\",\n        \"operationId\": \"get_users_users_get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"title\": \"Response Get Users Users Get\",\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/User\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Create User\",\n        \"operationId\": \"create_user_users_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/users/{user_id}\": {\n      \"get\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Get User\",\n        \"operationId\": \"get_user_users__user_id__get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"User Id\",\n              \"type\": \"integer\"\n            },\n            \"name\": \"user_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Delete User\",\n        \"operationId\": \"delete_user_users__user_id__delete\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"User Id\",\n              \"type\": \"integer\"\n            },\n            \"name\": \"user_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Successful Response\"\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Update User\",\n        \"operationId\": \"update_user_users__user_id__patch\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"User Id\",\n              \"type\": \"integer\"\n            },\n            \"name\": \"user_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/teams\": {\n      \"get\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Get Teams\",\n        \"operationId\": \"get_teams_teams_get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"title\": \"Response Get Teams Teams Get\",\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Team\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Create Team\",\n        \"operationId\": \"create_team_teams_post\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Team\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Team\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/teams/{team_id}\": {\n      \"get\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Get Team\",\n        \"operationId\": \"get_team_teams__team_id__get\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Team Id\",\n              \"type\": \"integer\"\n            },\n            \"name\": \"team_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Team\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Delete Team\",\n        \"operationId\": \"delete_team_teams__team_id__delete\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Team Id\",\n              \"type\": \"integer\"\n            },\n            \"name\": \"team_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"Successful Response\"\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"patch\": {\n        \"tags\": [\n          \"general\"\n        ],\n        \"summary\": \"Update Team\",\n        \"operationId\": \"update_team_teams__team_id__patch\",\n        \"parameters\": [\n          {\n            \"required\": true,\n            \"schema\": {\n              \"title\": \"Team Id\",\n              \"type\": \"integer\"\n            },\n            \"name\": \"team_id\",\n            \"in\": \"path\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Team\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful Response\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Team\"\n                }\n              }\n            }\n          },\n          \"422\": {\n            \"description\": \"Validation Error\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"HTTPValidationError\": {\n        \"title\": \"HTTPValidationError\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"detail\": {\n            \"title\": \"Detail\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/ValidationError\"\n            }\n          }\n        }\n      },\n      \"RootResponse\": {\n        \"title\": \"RootResponse\",\n        \"required\": [\n          \"message\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"message\": {\n            \"title\": \"Message\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Team\": {\n        \"title\": \"Team\",\n        \"required\": [\n          \"id\",\n          \"name\",\n          \"description\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"title\": \"Id\",\n            \"type\": \"integer\"\n          },\n          \"name\": {\n            \"title\": \"Name\",\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"title\": \"Description\",\n            \"type\": \"string\"\n          },\n          \"is_active\": {\n            \"title\": \"Is Active\",\n            \"type\": \"boolean\"\n          },\n          \"created_at\": {\n            \"title\": \"Created At\",\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"updated_at\": {\n            \"title\": \"Updated At\",\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"users\": {\n            \"title\": \"Users\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/User\"\n            }\n          },\n          \"captain\": {\n            \"$ref\": \"#/components/schemas/User\"\n          }\n        }\n      },\n      \"User\": {\n        \"title\": \"User\",\n        \"required\": [\n          \"id\",\n          \"username\",\n          \"email\",\n          \"password\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"title\": \"Id\",\n            \"type\": \"integer\"\n          },\n          \"username\": {\n            \"title\": \"Username\",\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"title\": \"Email\",\n            \"type\": \"string\"\n          },\n          \"password\": {\n            \"title\": \"Password\",\n            \"type\": \"string\"\n          },\n          \"is_active\": {\n            \"title\": \"Is Active\",\n            \"type\": \"boolean\"\n          },\n          \"created_at\": {\n            \"title\": \"Created At\",\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        }\n      },\n      \"EnumComponent\": {\n        \"title\": \"EnumComponent\",\n        \"enum\": [\n          \"EnumValue1\",\n          \"EnumValue2\",\n          \"EnumValue3\"\n        ],\n        \"description\": \"An enumeration.\"\n      },\n      \"ValidationError\": {\n        \"title\": \"ValidationError\",\n        \"required\": [\n          \"loc\",\n          \"msg\",\n          \"type\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"loc\": {\n            \"title\": \"Location\",\n            \"type\": \"array\",\n            \"items\": {\n              \"anyOf\": [\n                {\n                  \"type\": \"string\"\n                },\n                {\n                  \"type\": \"integer\"\n                }\n              ]\n            }\n          },\n          \"msg\": {\n            \"title\": \"Message\",\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"title\": \"Error Type\",\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:8080\"\n    }\n  ]\n}\n</code></pre> <p>OpenAPI specification</p> <p>Take a look at our short introduction to the OpenAPI specification if you need to look up what the specific nodes mean, or if you just need a refresher or some links for further information.</p> <p>Lets run the generator on this file:</p> openapi-python-generator https://raw.githubusercontent.com/MarcoMuellner/openapi-python-generator/main/tests/test_data/test_api.json testclient Generating data from https://raw.githubusercontent.com/MarcoMuellner/openapi-python-generator/main/tests/test_data/test_api.json <p>This will result in the folder structure as denoted in the quick start section. Lets take a deep dive on what the generator created for us, starting with the models.</p>"},{"location":"tutorial/#the-models-module","title":"The models module","text":"<p>The models module contains the generated models from the <code>Components</code> section of the OpenAPI definition, each in their individual file. There are two different types of models, currently supported by the generator:</p> <ul> <li>pydantic models</li> <li>enums</li> </ul> <p>Both are valid structures in the OpenApi specification. The enumeration models will always create mixin string classes, as for example in the <code>EnumContent.py</code> file:</p> <p>EnumContent.py</p> <pre><code>from enum import Enum\n\n\nclass EnumComponent(str, Enum):\n\n    enumvalue1 = \"EnumValue1\"\n    enumvalue2 = \"EnumValue2\"\n    enumvalue3 = \"EnumValue3\"\n</code></pre> <p>This is pretty straight forward, but what about the pydantic models? Lets take a look at the <code>User.py</code> and the <code>Team.py</code> files:</p> User.pyTeam.py <pre><code>from typing import *\n\nfrom pydantic import BaseModel, Field\n\n\nclass User(BaseModel):\n\"\"\"\nUser model\n\n\"\"\"\n\nid: int = Field(alias=\"id\")\n\nusername: str = Field(alias=\"username\")\n\nemail: str = Field(alias=\"email\")\n\npassword: str = Field(alias=\"password\")\n\nis_active: Optional[bool] = Field(alias=\"is_active\", default=None)\n\ncreated_at: Optional[str] = Field(alias=\"created_at\", default=None)\n</code></pre> <pre><code>from typing import *\n\nfrom pydantic import BaseModel, Field\n\nfrom .User import User\n\n\nclass Team(BaseModel):\n\"\"\"\nTeam model\n\n\"\"\"\n\nid: int = Field(alias=\"id\")\n\nname: str = Field(alias=\"name\")\n\ndescription: str = Field(alias=\"description\")\n\nis_active: Optional[bool] = Field(alias=\"is_active\", default=None)\n\ncreated_at: Optional[str] = Field(alias=\"created_at\", default=None)\n\nupdated_at: Optional[str] = Field(alias=\"updated_at\", default=None)\n\nusers: Optional[List[User]] = Field(alias=\"users\", default=None)\n\ncaptain: Optional[User] = Field(alias=\"captain\", default=None)\n</code></pre> <p>If you are not familiar with the pydantic library, you can also check out the pydantic documentation. Pydantic is extremely useful, as it provides light weight in built validation and type checking. We therefore can very easily represent the models and their various properties (and requirements) through the models. For example, the <code>created_at</code> property is optional (nullable) in the spec, and this is therefore reflected in the model.</p> test_api.jsonTeam.py <pre><code>...\n\"required\": [\n      \"id\",\n      \"name\",\n      \"description\"\n    ],\n    ...\n\"properties\": {\n    ...\n    \"created_at\": {\n            \"title\": \"Created At\",\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n...\n</code></pre> <pre><code>from typing import *\n\nfrom pydantic import BaseModel\n\nfrom .User import User\n\n\nclass Team(BaseModel):\n    ...\n    created_at: Optional[str] = None\n    ...\n</code></pre> <p>Hence, we can also directly use the json output from the service requests and return these objects! (FastAPI does this too, but the other way round.) The code also automatically converts to the proper python types, arrays and Unions, as they are available by the OpenAPI specification. But lets take a look at the services.</p>"},{"location":"tutorial/#the-services-module","title":"The services module","text":"<p>The services module is the nitty gritty part of the generator. Depending on the library you chose in the generator, the module will contain either one or two submodules:</p> <ul> <li><code>async_general_service.py</code> containing the async general service</li> <li><code>general_service.py</code> containing the synchronous general service</li> </ul> <p>Lets stop for a moment and take a look at that. The generator will create a module for each individual <code>tag</code> from the OpenAPI specification:</p> <p>test_api.json</p> <pre><code>...\n\"tags\": [\n      \"general\"\n    ]\n...\n</code></pre> <p>Therefore, if we add a second and third tag, the generator will create the additional two - four modules.</p> <p>The next thing is async support: You may want (depending on your usecase) bot async and sync services. The generator will create both (for httpx), only sync (for requests) or only async (for aiohttp) services.</p> async_general_service.pygeneral_service.py <pre><code>...\nasync def async_root__get() -&gt; RootResponse:\n    base_path = APIConfig().base_path\n    path = f\"/\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": f\"Bearer { APIConfig().get_access_token() }\",\n    }\n    query_params = {}\n\n    with httpx.AsyncClient(base_url=base_path) as client:\n        response = await client.request(\n            method=\"get\",\n            url=path,\n            headers=headers,\n            params=query_params,\n        )\n\n    if response.status_code != 200:\n        raise Exception(f\" failed with status code: {response.status_code}\")\n    return RootResponse(**response.json())\n...\n</code></pre> <pre><code>...\ndef root__get() -&gt; RootResponse:\n    base_path = APIConfig().base_path\n    path = f\"/\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": f\"Bearer { APIConfig().get_access_token() }\",\n    }\n    query_params = {}\n\n    with httpx.Client(base_url=base_path) as client:\n        response = client.request(\n            method=\"get\",\n            url=path,\n            headers=headers,\n            params=query_params,\n        )\n\n    if response.status_code != 200:\n        raise Exception(f\" failed with status code: {response.status_code}\")\n    return RootResponse(**response.json())\n...\n</code></pre> <p>While we are at the topic of looking at the individual functions, lets walk through the one above:</p> <pre><code>...\ndef root__get() -&gt; RootResponse:\n...\n</code></pre> <p>All functions are fully annotated with the proper types, which provides the inspection of your IDE better insight on what to provide to a given function and what to expect.</p> <pre><code>...\npath = f\"/\"\n...\n</code></pre> <p>Paths are automatically created from the specification. No need to worry about that.</p> <pre><code>...\nheaders = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": f\"Bearer { APIConfig.get_access_token() }\",\n        }\nquery_params = {}\n...\n</code></pre> <p>Authorization token is always passed to the Rest API, you will not need to worry about differentiating between the calls. Query params are also automatically created, with the input parameters and depending on your spec (for this root call no params are necessary)</p> <pre><code>...\nif response.status_code != 200:\n    raise Exception(f\" failed with status code: {response.status_code}\")\nreturn RootResponse(**response.json())\n...\n</code></pre> <p>The generator will automatically raise an exception if a non-good status code was returned by the API, for whatever reason. The \"good\" status code is also determined by the spec - and can be defined through your API. For a post call for example, the spec will define a 201 status code as a good status code.</p> <p>Lastly the code will automatically type check and convert the response to the appropriate type (in this case <code>RootResponse</code>). This is really neat, because without doing much in the code, it automatically validates that your API truly responds the way we expect it to respond, and gives you proper typing latter on in your code - all thanks to the magic of pydantic.</p>"},{"location":"tutorial/advanced/","title":"Advanced usage","text":"<p>coming soon</p>"},{"location":"tutorial/authentication/","title":"Authentication","text":"<p>coming soon</p>"}]}